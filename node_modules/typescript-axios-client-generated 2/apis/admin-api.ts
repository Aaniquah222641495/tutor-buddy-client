/* tslint:disable */
/* eslint-disable */
/**
 * Student Tutor Booking Management System
 * This is a system allowing students and tutors to book in-person sessions at designated venues on campus.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: 222641495@mycput.ac.za
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from 'typescript-axios-client-generated 2/configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from 'typescript-axios-client-generated 2/base';
import { AdminDTO } from 'typescript-axios-client-generated 2/models';
import { UserDTO } from 'typescript-axios-client-generated 2/models';
/**
 * AdminApi - axios parameter creator
 * @export
 */
export const AdminApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This can only be done by the admin.
         * @summary Create a new admin
         * @param {AdminDTO} body AdminDTO object that needs to be added to the system
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAdmin: async (body: AdminDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createAdmin.');
            }
            const localVarPath = `/admin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This can only be done by the admin.
         * @summary Create a new user
         * @param {UserDTO} body UserDTO object that needs to be added to the system
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser: async (body: UserDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createUser.');
            }
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This can only be done by the admin.
         * @summary Delete admin
         * @param {number} adminId ID of user that needs to be deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAdmin: async (adminId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'adminId' is not null or undefined
            if (adminId === null || adminId === undefined) {
                throw new RequiredError('adminId','Required parameter adminId was null or undefined when calling deleteAdmin.');
            }
            const localVarPath = `/admin/{adminId}`
                .replace(`{${"adminId"}}`, encodeURIComponent(String(adminId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This can only be done by the admin.
         * @summary Delete user
         * @param {number} userId ID of user that needs to be deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser: async (userId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling deleteUser.');
            }
            const localVarPath = `/users/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a single user
         * @summary Get user by user ID
         * @param {number} adminId ID of admin to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdminById: async (adminId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'adminId' is not null or undefined
            if (adminId === null || adminId === undefined) {
                throw new RequiredError('adminId','Required parameter adminId was null or undefined when calling getAdminById.');
            }
            const localVarPath = `/admin/{adminId}`
                .replace(`{${"adminId"}}`, encodeURIComponent(String(adminId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a single user
         * @summary Get user by user ID
         * @param {number} userId ID of user to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserById: async (userId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling getUserById.');
            }
            const localVarPath = `/users/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This can only be done by the admin.
         * @summary Update an existing admin
         * @param {AdminDTO} body Updated user object
         * @param {number} adminId ID of user that needs to be updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAdmin: async (body: AdminDTO, adminId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateAdmin.');
            }
            // verify required parameter 'adminId' is not null or undefined
            if (adminId === null || adminId === undefined) {
                throw new RequiredError('adminId','Required parameter adminId was null or undefined when calling updateAdmin.');
            }
            const localVarPath = `/admin/{adminId}`
                .replace(`{${"adminId"}}`, encodeURIComponent(String(adminId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This can only be done by the admin.
         * @summary Update an existing user
         * @param {UserDTO} body Updated user object
         * @param {number} userId ID of user that needs to be updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser: async (body: UserDTO, userId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateUser.');
            }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling updateUser.');
            }
            const localVarPath = `/users/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdminApi - functional programming interface
 * @export
 */
export const AdminApiFp = function(configuration?: Configuration) {
    return {
        /**
         * This can only be done by the admin.
         * @summary Create a new admin
         * @param {AdminDTO} body AdminDTO object that needs to be added to the system
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAdmin(body: AdminDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminDTO>>> {
            const localVarAxiosArgs = await AdminApiAxiosParamCreator(configuration).createAdmin(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This can only be done by the admin.
         * @summary Create a new user
         * @param {UserDTO} body UserDTO object that needs to be added to the system
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUser(body: UserDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<UserDTO>>> {
            const localVarAxiosArgs = await AdminApiAxiosParamCreator(configuration).createUser(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This can only be done by the admin.
         * @summary Delete admin
         * @param {number} adminId ID of user that needs to be deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAdmin(adminId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await AdminApiAxiosParamCreator(configuration).deleteAdmin(adminId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This can only be done by the admin.
         * @summary Delete user
         * @param {number} userId ID of user that needs to be deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUser(userId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await AdminApiAxiosParamCreator(configuration).deleteUser(userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns a single user
         * @summary Get user by user ID
         * @param {number} adminId ID of admin to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAdminById(adminId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminDTO>>> {
            const localVarAxiosArgs = await AdminApiAxiosParamCreator(configuration).getAdminById(adminId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns a single user
         * @summary Get user by user ID
         * @param {number} userId ID of user to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserById(userId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<UserDTO>>> {
            const localVarAxiosArgs = await AdminApiAxiosParamCreator(configuration).getUserById(userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This can only be done by the admin.
         * @summary Update an existing admin
         * @param {AdminDTO} body Updated user object
         * @param {number} adminId ID of user that needs to be updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAdmin(body: AdminDTO, adminId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AdminDTO>>> {
            const localVarAxiosArgs = await AdminApiAxiosParamCreator(configuration).updateAdmin(body, adminId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This can only be done by the admin.
         * @summary Update an existing user
         * @param {UserDTO} body Updated user object
         * @param {number} userId ID of user that needs to be updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUser(body: UserDTO, userId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<UserDTO>>> {
            const localVarAxiosArgs = await AdminApiAxiosParamCreator(configuration).updateUser(body, userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AdminApi - factory interface
 * @export
 */
export const AdminApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * This can only be done by the admin.
         * @summary Create a new admin
         * @param {AdminDTO} body AdminDTO object that needs to be added to the system
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAdmin(body: AdminDTO, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminDTO>> {
            return AdminApiFp(configuration).createAdmin(body, options).then((request) => request(axios, basePath));
        },
        /**
         * This can only be done by the admin.
         * @summary Create a new user
         * @param {UserDTO} body UserDTO object that needs to be added to the system
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUser(body: UserDTO, options?: AxiosRequestConfig): Promise<AxiosResponse<UserDTO>> {
            return AdminApiFp(configuration).createUser(body, options).then((request) => request(axios, basePath));
        },
        /**
         * This can only be done by the admin.
         * @summary Delete admin
         * @param {number} adminId ID of user that needs to be deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAdmin(adminId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return AdminApiFp(configuration).deleteAdmin(adminId, options).then((request) => request(axios, basePath));
        },
        /**
         * This can only be done by the admin.
         * @summary Delete user
         * @param {number} userId ID of user that needs to be deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUser(userId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return AdminApiFp(configuration).deleteUser(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a single user
         * @summary Get user by user ID
         * @param {number} adminId ID of admin to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAdminById(adminId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminDTO>> {
            return AdminApiFp(configuration).getAdminById(adminId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a single user
         * @summary Get user by user ID
         * @param {number} userId ID of user to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserById(userId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<UserDTO>> {
            return AdminApiFp(configuration).getUserById(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * This can only be done by the admin.
         * @summary Update an existing admin
         * @param {AdminDTO} body Updated user object
         * @param {number} adminId ID of user that needs to be updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAdmin(body: AdminDTO, adminId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<AdminDTO>> {
            return AdminApiFp(configuration).updateAdmin(body, adminId, options).then((request) => request(axios, basePath));
        },
        /**
         * This can only be done by the admin.
         * @summary Update an existing user
         * @param {UserDTO} body Updated user object
         * @param {number} userId ID of user that needs to be updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUser(body: UserDTO, userId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<UserDTO>> {
            return AdminApiFp(configuration).updateUser(body, userId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AdminApi - object-oriented interface
 * @export
 * @class AdminApi
 * @extends {BaseAPI}
 */
export class AdminApi extends BaseAPI {
    /**
     * This can only be done by the admin.
     * @summary Create a new admin
     * @param {AdminDTO} body AdminDTO object that needs to be added to the system
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public async createAdmin(body: AdminDTO, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminDTO>> {
        return AdminApiFp(this.configuration).createAdmin(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This can only be done by the admin.
     * @summary Create a new user
     * @param {UserDTO} body UserDTO object that needs to be added to the system
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public async createUser(body: UserDTO, options?: AxiosRequestConfig) : Promise<AxiosResponse<UserDTO>> {
        return AdminApiFp(this.configuration).createUser(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This can only be done by the admin.
     * @summary Delete admin
     * @param {number} adminId ID of user that needs to be deleted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public async deleteAdmin(adminId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return AdminApiFp(this.configuration).deleteAdmin(adminId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This can only be done by the admin.
     * @summary Delete user
     * @param {number} userId ID of user that needs to be deleted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public async deleteUser(userId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return AdminApiFp(this.configuration).deleteUser(userId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns a single user
     * @summary Get user by user ID
     * @param {number} adminId ID of admin to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public async getAdminById(adminId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminDTO>> {
        return AdminApiFp(this.configuration).getAdminById(adminId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns a single user
     * @summary Get user by user ID
     * @param {number} userId ID of user to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public async getUserById(userId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<UserDTO>> {
        return AdminApiFp(this.configuration).getUserById(userId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This can only be done by the admin.
     * @summary Update an existing admin
     * @param {AdminDTO} body Updated user object
     * @param {number} adminId ID of user that needs to be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public async updateAdmin(body: AdminDTO, adminId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<AdminDTO>> {
        return AdminApiFp(this.configuration).updateAdmin(body, adminId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This can only be done by the admin.
     * @summary Update an existing user
     * @param {UserDTO} body Updated user object
     * @param {number} userId ID of user that needs to be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public async updateUser(body: UserDTO, userId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<UserDTO>> {
        return AdminApiFp(this.configuration).updateUser(body, userId, options).then((request) => request(this.axios, this.basePath));
    }
}

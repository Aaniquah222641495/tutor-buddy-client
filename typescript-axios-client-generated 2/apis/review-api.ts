/* tslint:disable */
/* eslint-disable */
/**
 * Student Tutor Booking Management System
 * This is a system allowing students and tutors to book in-person sessions at designated venues on campus.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: 222641495@mycput.ac.za
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { ReviewDTO } from '../models';
/**
 * ReviewApi - axios parameter creator
 * @export
 */
export const ReviewApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This can only be done by the student.
         * @summary Add review
         * @param {ReviewDTO} body ReviewDTO object that needs to be added to the system
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addReview: async (body: ReviewDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling addReview.');
            }
            const localVarPath = `/review`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * deletes based on Id provided
         * @summary Delete existing review
         * @param {number} reviewId id of review to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteReview: async (reviewId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'reviewId' is not null or undefined
            if (reviewId === null || reviewId === undefined) {
                throw new RequiredError('reviewId','Required parameter reviewId was null or undefined when calling deleteReview.');
            }
            const localVarPath = `/review/{reviewId}`
                .replace(`{${"reviewId"}}`, encodeURIComponent(String(reviewId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches data about a particular review
         * @summary Get review by Id
         * @param {number} reviewId Id of review to fetch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReview: async (reviewId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'reviewId' is not null or undefined
            if (reviewId === null || reviewId === undefined) {
                throw new RequiredError('reviewId','Required parameter reviewId was null or undefined when calling getReview.');
            }
            const localVarPath = `/review/{reviewId}`
                .replace(`{${"reviewId"}}`, encodeURIComponent(String(reviewId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates based on ID provided in path
         * @summary Update existing review
         * @param {ReviewDTO} body 
         * @param {number} reviewId ID of review to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateReview: async (body: ReviewDTO, reviewId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateReview.');
            }
            // verify required parameter 'reviewId' is not null or undefined
            if (reviewId === null || reviewId === undefined) {
                throw new RequiredError('reviewId','Required parameter reviewId was null or undefined when calling updateReview.');
            }
            const localVarPath = `/review/{reviewId}`
                .replace(`{${"reviewId"}}`, encodeURIComponent(String(reviewId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReviewApi - functional programming interface
 * @export
 */
export const ReviewApiFp = function(configuration?: Configuration) {
    return {
        /**
         * This can only be done by the student.
         * @summary Add review
         * @param {ReviewDTO} body ReviewDTO object that needs to be added to the system
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addReview(body: ReviewDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ReviewDTO>>> {
            const localVarAxiosArgs = await ReviewApiAxiosParamCreator(configuration).addReview(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * deletes based on Id provided
         * @summary Delete existing review
         * @param {number} reviewId id of review to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteReview(reviewId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await ReviewApiAxiosParamCreator(configuration).deleteReview(reviewId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Fetches data about a particular review
         * @summary Get review by Id
         * @param {number} reviewId Id of review to fetch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getReview(reviewId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ReviewDTO>>> {
            const localVarAxiosArgs = await ReviewApiAxiosParamCreator(configuration).getReview(reviewId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Updates based on ID provided in path
         * @summary Update existing review
         * @param {ReviewDTO} body 
         * @param {number} reviewId ID of review to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateReview(body: ReviewDTO, reviewId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ReviewDTO>>> {
            const localVarAxiosArgs = await ReviewApiAxiosParamCreator(configuration).updateReview(body, reviewId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ReviewApi - factory interface
 * @export
 */
export const ReviewApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * This can only be done by the student.
         * @summary Add review
         * @param {ReviewDTO} body ReviewDTO object that needs to be added to the system
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addReview(body: ReviewDTO, options?: AxiosRequestConfig): Promise<AxiosResponse<ReviewDTO>> {
            return ReviewApiFp(configuration).addReview(body, options).then((request) => request(axios, basePath));
        },
        /**
         * deletes based on Id provided
         * @summary Delete existing review
         * @param {number} reviewId id of review to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteReview(reviewId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return ReviewApiFp(configuration).deleteReview(reviewId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches data about a particular review
         * @summary Get review by Id
         * @param {number} reviewId Id of review to fetch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getReview(reviewId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<ReviewDTO>> {
            return ReviewApiFp(configuration).getReview(reviewId, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates based on ID provided in path
         * @summary Update existing review
         * @param {ReviewDTO} body 
         * @param {number} reviewId ID of review to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateReview(body: ReviewDTO, reviewId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<ReviewDTO>> {
            return ReviewApiFp(configuration).updateReview(body, reviewId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ReviewApi - object-oriented interface
 * @export
 * @class ReviewApi
 * @extends {BaseAPI}
 */
export class ReviewApi extends BaseAPI {
    /**
     * This can only be done by the student.
     * @summary Add review
     * @param {ReviewDTO} body ReviewDTO object that needs to be added to the system
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReviewApi
     */
    public async addReview(body: ReviewDTO, options?: AxiosRequestConfig) : Promise<AxiosResponse<ReviewDTO>> {
        return ReviewApiFp(this.configuration).addReview(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * deletes based on Id provided
     * @summary Delete existing review
     * @param {number} reviewId id of review to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReviewApi
     */
    public async deleteReview(reviewId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return ReviewApiFp(this.configuration).deleteReview(reviewId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetches data about a particular review
     * @summary Get review by Id
     * @param {number} reviewId Id of review to fetch
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReviewApi
     */
    public async getReview(reviewId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<ReviewDTO>> {
        return ReviewApiFp(this.configuration).getReview(reviewId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Updates based on ID provided in path
     * @summary Update existing review
     * @param {ReviewDTO} body 
     * @param {number} reviewId ID of review to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReviewApi
     */
    public async updateReview(body: ReviewDTO, reviewId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<ReviewDTO>> {
        return ReviewApiFp(this.configuration).updateReview(body, reviewId, options).then((request) => request(this.axios, this.basePath));
    }
}

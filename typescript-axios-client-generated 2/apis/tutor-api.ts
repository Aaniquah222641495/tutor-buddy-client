/* tslint:disable */
/* eslint-disable */
/**
 * Student Tutor Booking Management System
 * This is a system allowing students and tutors to book in-person sessions at designated venues on campus.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: 222641495@mycput.ac.za
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { TutorDTO } from '../models';
/**
 * TutorApi - axios parameter creator
 * @export
 */
export const TutorApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This can only be done by the admin.
         * @summary Add a new tutor
         * @param {TutorDTO} body Tutor object that needs to be added to the system
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTutor: async (body: TutorDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling addTutor.');
            }
            const localVarPath = `/tutor`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This can only be done by the admin.
         * @summary Delete tutor
         * @param {number} tutorId ID of tutor that needs to be deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTutor: async (tutorId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tutorId' is not null or undefined
            if (tutorId === null || tutorId === undefined) {
                throw new RequiredError('tutorId','Required parameter tutorId was null or undefined when calling deleteTutor.');
            }
            const localVarPath = `/tutor/{tutorId}`
                .replace(`{${"tutorId"}}`, encodeURIComponent(String(tutorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a single tutor
         * @summary Get tutor by ID
         * @param {number} tutorId ID of tutor to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTutorById: async (tutorId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tutorId' is not null or undefined
            if (tutorId === null || tutorId === undefined) {
                throw new RequiredError('tutorId','Required parameter tutorId was null or undefined when calling getTutorById.');
            }
            const localVarPath = `/tutor/{tutorId}`
                .replace(`{${"tutorId"}}`, encodeURIComponent(String(tutorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This can only be done by the admin.
         * @summary Update an existing tutor
         * @param {TutorDTO} body Updated tutor object
         * @param {number} tutorId ID of tutor that needs to be updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTutor: async (body: TutorDTO, tutorId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateTutor.');
            }
            // verify required parameter 'tutorId' is not null or undefined
            if (tutorId === null || tutorId === undefined) {
                throw new RequiredError('tutorId','Required parameter tutorId was null or undefined when calling updateTutor.');
            }
            const localVarPath = `/tutor/{tutorId}`
                .replace(`{${"tutorId"}}`, encodeURIComponent(String(tutorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TutorApi - functional programming interface
 * @export
 */
export const TutorApiFp = function(configuration?: Configuration) {
    return {
        /**
         * This can only be done by the admin.
         * @summary Add a new tutor
         * @param {TutorDTO} body Tutor object that needs to be added to the system
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addTutor(body: TutorDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<TutorDTO>>> {
            const localVarAxiosArgs = await TutorApiAxiosParamCreator(configuration).addTutor(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This can only be done by the admin.
         * @summary Delete tutor
         * @param {number} tutorId ID of tutor that needs to be deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTutor(tutorId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await TutorApiAxiosParamCreator(configuration).deleteTutor(tutorId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns a single tutor
         * @summary Get tutor by ID
         * @param {number} tutorId ID of tutor to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTutorById(tutorId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<TutorDTO>>> {
            const localVarAxiosArgs = await TutorApiAxiosParamCreator(configuration).getTutorById(tutorId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This can only be done by the admin.
         * @summary Update an existing tutor
         * @param {TutorDTO} body Updated tutor object
         * @param {number} tutorId ID of tutor that needs to be updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTutor(body: TutorDTO, tutorId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<TutorDTO>>> {
            const localVarAxiosArgs = await TutorApiAxiosParamCreator(configuration).updateTutor(body, tutorId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * TutorApi - factory interface
 * @export
 */
export const TutorApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * This can only be done by the admin.
         * @summary Add a new tutor
         * @param {TutorDTO} body Tutor object that needs to be added to the system
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addTutor(body: TutorDTO, options?: AxiosRequestConfig): Promise<AxiosResponse<TutorDTO>> {
            return TutorApiFp(configuration).addTutor(body, options).then((request) => request(axios, basePath));
        },
        /**
         * This can only be done by the admin.
         * @summary Delete tutor
         * @param {number} tutorId ID of tutor that needs to be deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTutor(tutorId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return TutorApiFp(configuration).deleteTutor(tutorId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a single tutor
         * @summary Get tutor by ID
         * @param {number} tutorId ID of tutor to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTutorById(tutorId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<TutorDTO>> {
            return TutorApiFp(configuration).getTutorById(tutorId, options).then((request) => request(axios, basePath));
        },
        /**
         * This can only be done by the admin.
         * @summary Update an existing tutor
         * @param {TutorDTO} body Updated tutor object
         * @param {number} tutorId ID of tutor that needs to be updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTutor(body: TutorDTO, tutorId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<TutorDTO>> {
            return TutorApiFp(configuration).updateTutor(body, tutorId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TutorApi - object-oriented interface
 * @export
 * @class TutorApi
 * @extends {BaseAPI}
 */
export class TutorApi extends BaseAPI {
    /**
     * This can only be done by the admin.
     * @summary Add a new tutor
     * @param {TutorDTO} body Tutor object that needs to be added to the system
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TutorApi
     */
    public async addTutor(body: TutorDTO, options?: AxiosRequestConfig) : Promise<AxiosResponse<TutorDTO>> {
        return TutorApiFp(this.configuration).addTutor(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This can only be done by the admin.
     * @summary Delete tutor
     * @param {number} tutorId ID of tutor that needs to be deleted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TutorApi
     */
    public async deleteTutor(tutorId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return TutorApiFp(this.configuration).deleteTutor(tutorId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns a single tutor
     * @summary Get tutor by ID
     * @param {number} tutorId ID of tutor to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TutorApi
     */
    public async getTutorById(tutorId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<TutorDTO>> {
        return TutorApiFp(this.configuration).getTutorById(tutorId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This can only be done by the admin.
     * @summary Update an existing tutor
     * @param {TutorDTO} body Updated tutor object
     * @param {number} tutorId ID of tutor that needs to be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TutorApi
     */
    public async updateTutor(body: TutorDTO, tutorId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<TutorDTO>> {
        return TutorApiFp(this.configuration).updateTutor(body, tutorId, options).then((request) => request(this.axios, this.basePath));
    }
}

/*
 * Student Tutor Booking Management System
 * This is a system allowing students and tutors to book in-person sessions at designated venues on campus.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: 222641495@mycput.ac.za
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.63
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from "../ApiClient";
import SubjectDTO from '../model/SubjectDTO';

/**
* Subject service.
* @module api/SubjectApi
* @version 1.0.0
*/
export default class SubjectApi {

    /**
    * Constructs a new SubjectApi. 
    * @alias module:api/SubjectApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the addSubject operation.
     * @callback moduleapi/SubjectApi~addSubjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubjectDTO{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a new subject
     * This can only be done by the admin.
     * @param {module:model/SubjectDTO} body SubjectDTO object that needs to be added to the system
     * @param {module:api/SubjectApi~addSubjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    addSubject(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addSubject");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SubjectDTO;

      return this.apiClient.callApi(
        '/subject', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteSubject operation.
     * @callback moduleapi/SubjectApi~deleteSubjectCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete subject
     * This can only be done by the admin.
     * @param {Number} subjectId ID of subject that needs to be deleted
     * @param {module:api/SubjectApi~deleteSubjectCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSubject(subjectId, callback) {
      
      let postBody = null;
      // verify the required parameter 'subjectId' is set
      if (subjectId === undefined || subjectId === null) {
        throw new Error("Missing the required parameter 'subjectId' when calling deleteSubject");
      }

      let pathParams = {
        'subjectId': subjectId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/subject/{subjectId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllSubject operation.
     * @callback moduleapi/SubjectApi~getAllSubjectCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SubjectDTO>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all subject
     * Returns all subjects in the system
     * @param {module:api/SubjectApi~getAllSubjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllSubject(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [SubjectDTO];

      return this.apiClient.callApi(
        '/subject', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getSubjectById operation.
     * @callback moduleapi/SubjectApi~getSubjectByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubjectDTO{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get subject by ID
     * Returns a single subject
     * @param {Number} subjectId ID of subject to return
     * @param {module:api/SubjectApi~getSubjectByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getSubjectById(subjectId, callback) {
      
      let postBody = null;
      // verify the required parameter 'subjectId' is set
      if (subjectId === undefined || subjectId === null) {
        throw new Error("Missing the required parameter 'subjectId' when calling getSubjectById");
      }

      let pathParams = {
        'subjectId': subjectId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SubjectDTO;

      return this.apiClient.callApi(
        '/subject/{subjectId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateSubject operation.
     * @callback moduleapi/SubjectApi~updateSubjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubjectDTO{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an existing subject
     * This can only be done by the admin.
     * @param {module:model/SubjectDTO} body Updated subject object
     * @param {Number} subjectId ID of subject that needs to be updated
     * @param {module:api/SubjectApi~updateSubjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    updateSubject(body, subjectId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateSubject");
      }
      // verify the required parameter 'subjectId' is set
      if (subjectId === undefined || subjectId === null) {
        throw new Error("Missing the required parameter 'subjectId' when calling updateSubject");
      }

      let pathParams = {
        'subjectId': subjectId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SubjectDTO;

      return this.apiClient.callApi(
        '/subject/{subjectId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}
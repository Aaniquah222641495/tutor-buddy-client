/*
 * Student Tutor Booking Management System
 * This is a system allowing students and tutors to book in-person sessions at designated venues on campus.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: 222641495@mycput.ac.za
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.63
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from "../ApiClient";
import StudentDTO from '../model/StudentDTO';

/**
* Student service.
* @module api/StudentApi
* @version 1.0.0
*/
export default class StudentApi {

    /**
    * Constructs a new StudentApi. 
    * @alias module:api/StudentApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the addStudent operation.
     * @callback moduleapi/StudentApi~addStudentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StudentDTO{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a new student
     * This can only be done by the admin.
     * @param {module:model/StudentDTO} body StudentDTO object that needs to be added to the system
     * @param {module:api/StudentApi~addStudentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    addStudent(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addStudent");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StudentDTO;

      return this.apiClient.callApi(
        '/student', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the authenticateStudent operation.
     * @callback moduleapi/StudentApi~authenticateStudentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StudentDTO{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * authenticate student
     * Returns a single student
     * @param {String} email email of the Student
     * @param {String} password password of the Student
     * @param {module:api/StudentApi~authenticateStudentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    authenticateStudent(email, password, callback) {
      
      let postBody = null;
      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling authenticateStudent");
      }
      // verify the required parameter 'password' is set
      if (password === undefined || password === null) {
        throw new Error("Missing the required parameter 'password' when calling authenticateStudent");
      }

      let pathParams = {
        'email': email,'password': password
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StudentDTO;

      return this.apiClient.callApi(
        '/student/authenticate/{email}/{password}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteStudent operation.
     * @callback moduleapi/StudentApi~deleteStudentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete student
     * This can only be done by the admin.
     * @param {Number} studentId ID of student that needs to be deleted
     * @param {module:api/StudentApi~deleteStudentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteStudent(studentId, callback) {
      
      let postBody = null;
      // verify the required parameter 'studentId' is set
      if (studentId === undefined || studentId === null) {
        throw new Error("Missing the required parameter 'studentId' when calling deleteStudent");
      }

      let pathParams = {
        'studentId': studentId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/student/{studentId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllStudents operation.
     * @callback moduleapi/StudentApi~getAllStudentsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/StudentDTO>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all student
     * Returns all student in the system
     * @param {module:api/StudentApi~getAllStudentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllStudents(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [StudentDTO];

      return this.apiClient.callApi(
        '/student', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getStudentById operation.
     * @callback moduleapi/StudentApi~getStudentByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StudentDTO{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get student by ID
     * Returns a single student
     * @param {Number} studentId ID of student to return
     * @param {module:api/StudentApi~getStudentByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getStudentById(studentId, callback) {
      
      let postBody = null;
      // verify the required parameter 'studentId' is set
      if (studentId === undefined || studentId === null) {
        throw new Error("Missing the required parameter 'studentId' when calling getStudentById");
      }

      let pathParams = {
        'studentId': studentId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StudentDTO;

      return this.apiClient.callApi(
        '/student/{studentId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateStudent operation.
     * @callback moduleapi/StudentApi~updateStudentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StudentDTO{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an existing student
     * This can only be done by the admin.
     * @param {module:model/StudentDTO} body Updated student object
     * @param {Number} studentId ID of student that needs to be updated
     * @param {module:api/StudentApi~updateStudentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    updateStudent(body, studentId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateStudent");
      }
      // verify the required parameter 'studentId' is set
      if (studentId === undefined || studentId === null) {
        throw new Error("Missing the required parameter 'studentId' when calling updateStudent");
      }

      let pathParams = {
        'studentId': studentId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StudentDTO;

      return this.apiClient.callApi(
        '/student/{studentId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}
/*
 * Student Tutor Booking Management System
 * This is a system allowing students and tutors to book in-person sessions at designated venues on campus.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: 222641495@mycput.ac.za
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.63
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.StudentTutorBookingManagementSystem);
  }
}(this, function(expect, StudentTutorBookingManagementSystem) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new StudentTutorBookingManagementSystem.StudentApi();
  });

  describe('(package)', function() {
    describe('StudentApi', function() {
      describe('addStudent', function() {
        it('should call addStudent successfully', function(done) {
          // TODO: uncomment, update parameter values for addStudent call and complete the assertions
          /*

          instance.addStudent(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(StudentTutorBookingManagementSystem.StudentDTO);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('authenticateStudent', function() {
        it('should call authenticateStudent successfully', function(done) {
          // TODO: uncomment, update parameter values for authenticateStudent call and complete the assertions
          /*

          instance.authenticateStudent(email, password, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(StudentTutorBookingManagementSystem.StudentDTO);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteStudent', function() {
        it('should call deleteStudent successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteStudent call
          /*

          instance.deleteStudent(studentId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getAllStudents', function() {
        it('should call getAllStudents successfully', function(done) {
          // TODO: uncomment getAllStudents call and complete the assertions
          /*

          instance.getAllStudents(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(StudentTutorBookingManagementSystem.StudentDTO);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getStudentById', function() {
        it('should call getStudentById successfully', function(done) {
          // TODO: uncomment, update parameter values for getStudentById call and complete the assertions
          /*

          instance.getStudentById(studentId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(StudentTutorBookingManagementSystem.StudentDTO);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateStudent', function() {
        it('should call updateStudent successfully', function(done) {
          // TODO: uncomment, update parameter values for updateStudent call and complete the assertions
          /*

          instance.updateStudent(body, studentId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(StudentTutorBookingManagementSystem.StudentDTO);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));

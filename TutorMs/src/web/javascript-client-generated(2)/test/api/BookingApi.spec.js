/*
 * Student Tutor Booking Management System
 * This is a system allowing students and tutors to book in-person sessions at designated venues on campus.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: 222641495@mycput.ac.za
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.63
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.StudentTutorBookingManagementSystem);
  }
}(this, function(expect, StudentTutorBookingManagementSystem) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new StudentTutorBookingManagementSystem.BookingApi();
  });

  describe('(package)', function() {
    describe('BookingApi', function() {
      describe('createBooking', function() {
        it('should call createBooking successfully', function(done) {
          // TODO: uncomment, update parameter values for createBooking call and complete the assertions
          /*

          instance.createBooking(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(StudentTutorBookingManagementSystem.BookingDTO);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteBooking', function() {
        it('should call deleteBooking successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteBooking call
          /*

          instance.deleteBooking(bookingId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getAllBookings', function() {
        it('should call getAllBookings successfully', function(done) {
          // TODO: uncomment getAllBookings call and complete the assertions
          /*

          instance.getAllBookings(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(StudentTutorBookingManagementSystem.BookingDTO);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getAllBookingsByLocation', function() {
        it('should call getAllBookingsByLocation successfully', function(done) {
          // TODO: uncomment, update parameter values for getAllBookingsByLocation call and complete the assertions
          /*

          instance.getAllBookingsByLocation(locationId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(StudentTutorBookingManagementSystem.BookingDTO);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getAllBookingsByStudent', function() {
        it('should call getAllBookingsByStudent successfully', function(done) {
          // TODO: uncomment, update parameter values for getAllBookingsByStudent call and complete the assertions
          /*

          instance.getAllBookingsByStudent(studentId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(StudentTutorBookingManagementSystem.BookingDTO);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getAllBookingsBySubject', function() {
        it('should call getAllBookingsBySubject successfully', function(done) {
          // TODO: uncomment, update parameter values for getAllBookingsBySubject call and complete the assertions
          /*

          instance.getAllBookingsBySubject(subjectId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(StudentTutorBookingManagementSystem.BookingDTO);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getAllBookingsByTutor', function() {
        it('should call getAllBookingsByTutor successfully', function(done) {
          // TODO: uncomment, update parameter values for getAllBookingsByTutor call and complete the assertions
          /*

          instance.getAllBookingsByTutor(tutorId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(StudentTutorBookingManagementSystem.BookingDTO);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getBookingById', function() {
        it('should call getBookingById successfully', function(done) {
          // TODO: uncomment, update parameter values for getBookingById call and complete the assertions
          /*

          instance.getBookingById(bookingId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(StudentTutorBookingManagementSystem.BookingDTO);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateBooking', function() {
        it('should call updateBooking successfully', function(done) {
          // TODO: uncomment, update parameter values for updateBooking call and complete the assertions
          /*

          instance.updateBooking(body, bookingId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(StudentTutorBookingManagementSystem.BookingDTO);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));

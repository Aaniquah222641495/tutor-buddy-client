/*
 * Student Tutor Booking Management System
 * This is a system allowing students and tutors to book in-person sessions at designated venues on campus.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: 222641495@mycput.ac.za
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.63
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.StudentTutorBookingManagementSystem);
  }
}(this, function(expect, StudentTutorBookingManagementSystem) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new StudentTutorBookingManagementSystem.TutorApi();
  });

  describe('(package)', function() {
    describe('TutorApi', function() {
      describe('addTutor', function() {
        it('should call addTutor successfully', function(done) {
          // TODO: uncomment, update parameter values for addTutor call and complete the assertions
          /*

          instance.addTutor(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(StudentTutorBookingManagementSystem.TutorDTO);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('authenticateTutor', function() {
        it('should call authenticateTutor successfully', function(done) {
          // TODO: uncomment, update parameter values for authenticateTutor call and complete the assertions
          /*

          instance.authenticateTutor(email, password, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(StudentTutorBookingManagementSystem.TutorDTO);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteTutor', function() {
        it('should call deleteTutor successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteTutor call
          /*

          instance.deleteTutor(tutorId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getAllTutors', function() {
        it('should call getAllTutors successfully', function(done) {
          // TODO: uncomment getAllTutors call and complete the assertions
          /*

          instance.getAllTutors(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(StudentTutorBookingManagementSystem.TutorDTO);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getTutorById', function() {
        it('should call getTutorById successfully', function(done) {
          // TODO: uncomment, update parameter values for getTutorById call and complete the assertions
          /*

          instance.getTutorById(tutorId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(StudentTutorBookingManagementSystem.TutorDTO);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateTutor', function() {
        it('should call updateTutor successfully', function(done) {
          // TODO: uncomment, update parameter values for updateTutor call and complete the assertions
          /*

          instance.updateTutor(body, tutorId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(StudentTutorBookingManagementSystem.TutorDTO);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
